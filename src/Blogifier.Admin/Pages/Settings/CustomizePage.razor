@layout SettingsLayout
@page "/admin/settings/customize/"
@inject HttpClient _http
@inject IStringLocalizer<Resource> _localizer
@inject IJSRuntime JSRuntime
@*<h1 class="app-section-title">Customize Standard Theme</h1>*@
<div class="app-section-content mw-100">
    <div class="stg-customize">
        @if (CurrentTheme != null)
        {
            <div class="stg-customize-head d-flex">
                <div>
                    <div class="stg-customize-head-cover shadow-sm">
                        <img src="@CurrentTheme.Cover" class="stg-customize-head-img" alt="@CurrentTheme.Title">
                    </div>
                </div>
                <div class="stg-customize-head-details">
                    <div class="stg-customize-head-title">@CurrentTheme.Title</div>
                    <p class="stg-customize-head-desc">This is a test description, one paragraph long description for you guys, there should not be a break line in this description, otherwise, it doesn't look good, and it gets messy. Also, we have 3 links.</p>
                    <ul class="stg-customize-head-info">
                        <li>Version 2.1</li>
                        <li>By John Doe</li>
                        <li><a href="#">Website</a></li>
                        <li><a href="#">GitHub</a></li>
                        <li><a href="#">Other Link</a></li>
                    </ul>
                </div>
            </div>
        }






        <div class="stg-customize-settings">
            <div class="stg-customize-settings-nav d-flex">
                <div class="nav nav-pills flex-grow-1" id="customize-tab" role="tablist">
                    <a class="nav-link active" id="customize-settings-tab" data-bs-toggle="pill" href="#customize-settings" role="tab" aria-controls="customize-settings" aria-selected="true">Settings</a>
                    <a class="nav-link" id="customize-widgets-tab" data-bs-toggle="pill" href="#customize-widgets" role="tab" aria-controls="customize-widgets" aria-selected="false">Widgets</a>
                    <a class="nav-link" id="customize-menu-tab" data-bs-toggle="pill" href="#customize-menu" role="tab" aria-controls="customize-menu" aria-selected="false">Menu</a>
                </div>
                <button class="btn btn-blogifier px-3 my-auto">Save Changes</button>
            </div>

            <div class="tab-content" id="customize-tabContent">

                <!--Settings -->
                <div class="tab-pane fade show active" id="customize-settings" role="tabpanel" aria-labelledby="customize-settings-tab">

                    @if (Settings != null)
                    {
                        <div class="accordion accordion-flush" id="accordionFlushExample">
                            @foreach (var section in Settings.Sections)
                            {

                                <!-- -->
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="head-@section.Label.GetHashCode()">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#id-@section.Label.GetHashCode()" aria-expanded="false" aria-controls="id-@section.Label.GetHashCode()">
                                            @section.Label
                                        </button>
                                    </h2>
                                    <div id="id-@section.Label.GetHashCode()" class="accordion-collapse collapse" aria-labelledby="head-@section.Label.GetHashCode()" data-bs-parent="#accordionFlushExample">
                                        <div class="accordion-body">
                                            @foreach (var field in section.Fields)
                                            {
                                                <div class="form-item">
                                                    @if (field.Type == "select")
                                                    {
                                                        <label class="form-item-label">@field.Label</label>
                                                        <select class="form-select selectpicker" id="@field.Id" name="@field.Id">
                                                            @foreach (var item in field.Options)
                                                            {
                                                                if (field.Value == item)
                                                                {
                                                                    <option value="@item" selected>@item</option>
                                                                }
                                                                else
                                                                {
                                                                    <option value="@item">@item</option>
                                                                }
                                                            }
                                                        </select>
                                                    }
                                                    else if (field.Type == "checkbox")
                                                    {

                                                        <div class="form-check form-switch">
                                                            <input class="form-check-input" type="checkbox" id="@field.Id" name="@field.Id" value="@field.Value">
                                                            <label class="form-check-label" for="@field.Id">@field.Label</label>
                                                        </div>
                                                    }
                                                    else if (field.Type == "textarea")
                                                    {
                                                        <label class="form-item-label">@field.Label</label>
                                                        <textarea class="form-control" id="@field.Id" name="@field.Id" rows="3" cols="50">@field.Value</textarea>
                                                    }
                                                    else
                                                    {
                                                        <label class="form-item-label">@field.Label</label>
                                                        <input type="text" class="form-control" id="@field.Id" name="@field.Id" value="@field.Value" />
                                                    }
                                                </div>
                                            }

                                        </div>
                                    </div>
                                </div>
                                <!--  -->

                            }
                            @*<button type="button" class="btn btn-blogifier" @onclick=@Save>@_localizer["Save Changes"]</button>*@
                        </div>
                    }

                </div>
                <!--/Settings -->

                <!-- Widgets -->
                <div class="tab-pane fade" id="customize-widgets" role="tabpanel" aria-labelledby="customize-widgets-tab">Widgets...</div>
                <!--/Widgets -->

                <!-- Menu -->
                <div class="tab-pane fade" id="customize-menu" role="tabpanel" aria-labelledby="customize-menu-tab">Menu...</div>
                <!--/Menu -->

            </div>
        </div>
    </div>
</div>

<ToasterComponent @ref="Toaster" />

@code {
    protected Blog Blog { get; set; }
    protected ThemeItem CurrentTheme { get; set; }
    protected ToasterComponent Toaster;
    protected ThemeSettings Settings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    public async Task Load()
    {
        Blog = await _http.GetFromJsonAsync<Blog>("api/blog");
        var allThemes = await _http.GetFromJsonAsync<IList<string>>($"api/storage/themes");

        Settings = await _http.GetFromJsonAsync<ThemeSettings>($"api/theme/{Blog.Theme}");

        foreach (var theme in allThemes)
        {
            if (theme.ToLower() == Blog.Theme.ToLower())
            {
                CurrentTheme = new ThemeItem
                {
                    Title = theme.Capitalize(),
                    IsCurrent = (Blog.Theme.ToLower() == theme.ToLower()),
                    Cover = await GetCover(theme)
                };
                break;
            }
        }
    }
    private async Task<string> GetCover(string theme)
    {
        string slash = System.IO.Path.DirectorySeparatorChar.ToString();
        string file = $"wwwroot{slash}themes{slash}{theme}{slash}screenshot.png";
        var result = await _http.PutAsJsonAsync<string>($"api/storage/exists", file);

        if (result.IsSuccessStatusCode)
            return $"themes/{theme}/screenshot.png";
        else
            return "img/img-placeholder.png";
    }

    protected async Task Save()
    {
        foreach (var section in Settings.Sections)
        {
            foreach (var field in section.Fields)
            {
                var val = await JSRuntime.InvokeAsync<object>("commonJsFunctions.getFieldValue", field);
                field.Value = val.ToString();
            }
        }

        Toaster.Toast(await _http.PostAsJsonAsync<ThemeSettings>($"api/theme/{Blog.Theme}", Settings));
    }
}
