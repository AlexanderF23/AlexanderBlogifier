@inject HttpClient _http
@inject IStringLocalizer<Resource> _localizer
@inject IToaster _toaster
<h1 class="app-settings-title">Public profile</h1>
<div class="app-settings-wrap app-settings-wrap-50">
    @if (Author != null)
    {
    <EditForm Model="@Author" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <div class="form-item">
            <label class="form-item-label">@_localizer["Profile picture"]</label>
            <div class="input-group d-flex">
                <img src="@Author.Avatar" width="48" height="48" class="rounded" alt="@Author.DisplayName" />
                <div class="ms-2">
                    <button class="btn btn-outline-secondary btn-sm" onclick="return fileManager.uploadClick('@UploadType.Avatar');" type="button"> @_localizer["select"]</button>
                    <button class="btn btn-outline-secondary btn-sm" onclick="" type="button"> @_localizer["remove"]</button>
                    <p class="m-0">Should be square and at least 250 X 250 pixel.</p>
                </div>
            </div>
        </div>
        <div class="form-item">
            <label class="form-item-label">@_localizer["name"]</label>
            <input class="form-control" @bind="Author.DisplayName" placeholder="@_localizer["name"]" />
            <ValidationMessage For="@(() => Author.DisplayName)" Class="mt-2 sm:ml-4 font-semibold text-red-600"></ValidationMessage>
        </div>
        <div class="form-item">
            <label class="form-item-label">@_localizer["email"]</label>
            <input class="form-control" type="email" @bind="Author.Email" placeholder="you@mail.com" />
            <ValidationMessage For="@(() => Author.Email)"></ValidationMessage>
        </div>
        <div class="form-item">
            <label class="form-item-label">@_localizer["user-bio"]</label>
            <textarea class="form-control" rows="4" @bind="Author.Bio" name="bio" />
        </div>
        <div class="form-item">
            <button type="submit" class="btn btn-blogifier px-5">@_localizer["save"]</button>
        </div>
    </EditForm>
    }

</div>
<ToasterComponent @ref="Toaster" />

@code {
    protected Author Author { get; set; }
    protected ToasterComponent Toaster;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    protected async Task Load()
    {
        Author = await _http.GetFromJsonAsync<Author>("api/author/getcurrent");
    }

    protected async Task Save()
    {
        Toaster.Toast(await _http.PutAsJsonAsync<Author>("api/author/update", Author));
        await Load();
    }
}
