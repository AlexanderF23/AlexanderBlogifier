@inject HttpClient _http
@inject IStringLocalizer<Resource> _localizer
@inject IToaster _toaster

@if (Author != null)
{
	<EditForm Model="@Model" OnValidSubmit="Save">
		<DataAnnotationsValidator />
		<div class="form-group">
			<label class="form-control-label">@_localizer["password"]</label>
			<input class="form-control" type="password" @bind="Model.Password" placeholder="@_localizer["password"]" />
			<ValidationMessage For="@(() => Model.Password)"></ValidationMessage>
		</div>
		<div class="form-group">
			<label class="form-control-label">@_localizer["confirm-password"]</label>
			<input class="form-control" type="password" @bind="Model.PasswordConfirm" placeholder="@_localizer["confirm-password"]" />
			<ValidationMessage For="@(() => Model.PasswordConfirm)"></ValidationMessage>
		</div>
		<div class="form-submit-button">
			<button type="submit" class="btn btn-brand">@_localizer["save"]</button>
		</div>
	</EditForm>
}

@code {
	protected Author Author { get; set; }
	protected RegisterModel Model { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await Load();
	}

	protected async Task Load()
	{
		Author = await _http.GetFromJsonAsync<Author>("api/author/getcurrent");
		Model = new RegisterModel
		{
			Name = Author.DisplayName,
			Email = Author.Email
		};
	}

	protected async Task Save()
	{
		Toast(await _http.PutAsJsonAsync<RegisterModel>("api/author/changepassword", Model));
		await Load();
	}

	protected void Toast(HttpResponseMessage msg)
	{
		if (msg.IsSuccessStatusCode)
			_toaster.Success(_localizer["completed"]);
		else
			_toaster.Error(_localizer["generic-error"]);
	}
}
