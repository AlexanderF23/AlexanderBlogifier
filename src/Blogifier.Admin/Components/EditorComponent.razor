@implements IAsyncDisposable
@inject IStringLocalizer<Resource> _localizer
@inject IJSRuntime _jsRuntime
@inject ILogger<EditorComponent> _logger

@code {
  [Parameter] public string Toolbar { get; set; } = default!;

  private IJSObjectReference? module;
  private ElementReference? _textareaReference;
  private InputFile? inputImageFiles;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./admin/js/editor.js");
      if (module is not null)
      {
        await module.InvokeVoidAsync("loadEditor", Toolbar, _textareaReference, inputImageFiles?.Element);
      }
    }
  }

  protected async Task LoadImageFiles()
  {
    if (module is not null)
    {
      await module.InvokeVoidAsync("previewImage", inputImageFiles?.Element);
    }
  }

  public async ValueTask SetValueAsync(string value)
  {
    if (module is not null)
    {
      await module.InvokeVoidAsync("setEditorValue", value);
    }
  }


  public async ValueTask<string?> GetValueAsync()
  {
    if (module is not null)
    {
      return await module.InvokeAsync<string>("getEditorValue");
    }
    return null;
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    if (module is not null)
    {
      await module.DisposeAsync();
    }
  }
}

<div class="easymde-wrapper"><textarea @ref="_textareaReference" tabindex="2" class="visually-hidden" placeholder="@_localizer["type-here"]"></textarea></div>
<InputFile @ref="inputImageFiles" OnChange="@LoadImageFiles" style="display:none;" accept="image/*" />
