@inject HttpClient _http
@inject IStringLocalizer<Resource> _localizer

@if (Mail != null)
{
	<EditForm model="@Mail" OnValidSubmit="Save">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="form-group">
			<label class="form-control-label">@_localizer["host"]</label>
			<input type="text" class="form-control" @bind="Mail.Host" name="host" placeholder="smtp.gmail.com" />
		</div>
		<div class="form-group">
			<label class="form-control-label">@_localizer["port"]</label>
			<input type="text" class="form-control" @bind="Mail.Port" name="port" placeholder="465" />
		</div>
		<div class="form-group">
			<label class="form-control-label">@_localizer["email"]</label>
			<input type="text" class="form-control" @bind="Mail.UserEmail" name="useremail" placeholder="you@gmail.com" />
		</div>
		<div class="form-group">
			<label class="form-control-label">@_localizer["password"]</label>
			<input type="password" class="form-control" @bind="Mail.UserPassword" name="password" />
		</div>

		<div class="form-group">
			<label class="form-control-label">@_localizer["to-name"]</label>
			<input type="text" class="form-control" @bind="Mail.ToName" name="toname" placeholder="Subscriber" />
		</div>
		<div class="form-group">
			<label class="form-control-label">@_localizer["from-email"]</label>
			<input type="text" class="form-control" @bind="Mail.FromEmail" name="fromemail" placeholder="noreply@webmaster.com" />
		</div>
		<div class="form-group">
			<label class="form-control-label">@_localizer["from-name"]</label>
			<input type="text" class="form-control" @bind="Mail.FromName" name="fromname" placeholder="Blog Admin" />
		</div>

		<div class="form-submit-button">
			<input type="submit" value="@_localizer["save"]" class="btn btn-brand" />
		</div>
	</EditForm>
}
<ToasterComponent @ref="Toaster" />

@code {
	protected ToasterComponent Toaster;

	protected Blog Blog { get; set; }
	protected Mail Mail { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Blog = await _http.GetFromJsonAsync<Blog>("api/blog");
		Mail = await _http.GetFromJsonAsync<Mail>("api/newsletter/mailsettings");
		if (Mail == null)
			Mail = new Mail();
	}

	protected async Task Save()
	{
		Toaster.Toast(await _http.PutAsJsonAsync<Mail>("api/newsletter/mailsettings", Mail));
	}
}