@using Blogifier.Shared
@inject HttpClient _http
@inject IStringLocalizer<Resource> _localizer
@inject IJSRuntime _jsruntime
@inject IToaster _toaster
@inject NavigationManager _navigation

<div class="app-posts pr-0 pr-lg-5">
    @if (Posts != null && Posts.Count > 0)
    {
        <div class="app-posts-toolbar d-flex">
            <div class="app-posts-selectall form-check me-3" data-toggle="tooltip" title="Select All">
                <input type="checkbox" @onchange="EventArgs => { CheckAll(EventArgs.Value); }" class="form-check-input">
            </div>
            <a class="app-posts-add btn btn-primary me-3" href="/admin/editor">
                New
            </a>
            <div class="app-posts-actions dropdown">
                <button class="btn btn-link dropdown-toggle" type="button" id="dropdownPostAction" data-bs-toggle="dropdown" aria-expanded="false">
                    Action
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownPostAction">
                    <button type="button" @onclick="(async ()=> await RunAction(GroupAction.Feature))" class="dropdown-item app-posts-actions-featured">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill text-warning" viewBox="0 0 16 16">
                            <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                        </svg>
                        <span>Feature</span>
                    </button>
                    <button type="button" @onclick="(async ()=> await RunAction(GroupAction.Publish))" class="dropdown-item app-posts-actions-publish">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill text-success" viewBox="0 0 16 16">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                        </svg>
                        <span>Publish</span>
                    </button>
                    <button type="button" @onclick="(async ()=> await RunAction(GroupAction.Unpublish))" class="dropdown-item app-posts-actions-unpublish">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-circle-fill text-warning" viewBox="0 0 16 16">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z" />
                        </svg>
                        <span>Unpublish</span>
                    </button>
                    <button type="button" @onclick="(async ()=> await RunAction(GroupAction.Delete))" class="dropdown-item app-posts-actions-delete">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle-fill text-danger" viewBox="0 0 16 16">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                        </svg>
                        <span>Delete</span>
                    </button>
                </div>
            </div>
            <div class="dropdown app-posts-filters ms-auto ms-3">
                <button class="btn btn-link dropdown-toggle" type="button" id="filterByStatus" data-bs-toggle="dropdown" aria-expanded="false">
                    @FilterLabel
                </button>
                <div class="dropdown-menu dropdown-menu-end" aria-labelledby="filterByStatus">
                    <button @onclick="(async ()=> await Filter(PublishedStatus.All))" class="dropdown-item">@_localizer["all"]</button>
                    <button @onclick="(async ()=> await Filter(PublishedStatus.Drafts))" class="dropdown-item">@_localizer["draft", true]</button>
                    <button @onclick="(async ()=> await Filter(PublishedStatus.Published))" class="dropdown-item">@_localizer["published"]</button>
                    <button @onclick="(async ()=> await Filter(PublishedStatus.Featured))" class="dropdown-item">@_localizer["featured"]</button>
                </div>
            </div>
            <button type="button" class="btn btn-link app-posts-search-toggle" data-bs-toggle="collapse" data-bs-target="#collapseExample">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                </svg>
            </button>
        </div>

        <div class="app-posts-search collapse" id="collapseExample">
            <div class="d-flex">
                <input @bind="SearchTerm" @onkeyup="SearchKeyPress" class="app-posts-search-input flex-grow-1" type="search">
                <button @onclick="(async () => await SearchPosts())" class="app-posts-search-button" type="button">@_localizer["search"]</button>
            </div>
        </div>

        <ul class="app-posts-list" aria-label="posts">
            @foreach (var post in Posts)
            {
                <li class="app-posts-item d-flex align-items-center">
                    @{
                        string title = post.Title.Length < 60 ? post.Title : post.Title.Substring(0, 57) + "...";
                        string pubStatus = post.Published > DateTime.MinValue ? "published" : "draft";
                        string pubDate = post.Published > DateTime.MinValue ? post.Published.ToFriendlyShortDateString() : "Draft";
                        string featured = post.IsFeatured ? "is-featured" : "";
                    }
                    <div class="app-posts-item-select custom-control custom-checkbox mr-md-3">
                        <input type="checkbox" @bind="post.Selected" class="custom-control-input" id="EXAMPLE_@(post.Id)">
                        <label class="custom-control-label" for="EXAMPLE_@(post.Id)"><span class="sr-only">Select All</span></label>
                    </div>

                    <a class="app-posts-item-link" href="admin/editor?slug=@post.Slug">@title</a>
                    <span class="app-posts-item-date ml-auto d-none d-lg-block ml-3">@pubDate</span>
                    <button class="app-posts-item-status app-posts-item-status-@pubStatus ml-3" @onclick="(async () => await Publish(post))" data-toggle="tooltip" title="Status">
                        <svg class="bi bi-circle-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="8" cy="8" r="8" />
                        </svg>
                    </button>
                    <button class="app-posts-item-featured @featured ml-3" @onclick="(async () => await Featured(post))" data-toggle="tooltip" title="Featured">
                        <svg class="bi bi-star-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                        </svg>
                        <svg class="bi bi-star" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z" />
                        </svg>

                    </button>
                    <a href="posts/@post.Slug" target="_blank" class="app-posts-item-external ml-3" data-toggle="tooltip" title="Link">
                        <svg class="bi bi-box-arrow-up-right" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M1.5 13A1.5 1.5 0 0 0 3 14.5h8a1.5 1.5 0 0 0 1.5-1.5V9a.5.5 0 0 0-1 0v4a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5V5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 0 0-1H3A1.5 1.5 0 0 0 1.5 5v8zm7-11a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-1 0V2.5H9a.5.5 0 0 1-.5-.5z" />
                            <path fill-rule="evenodd" d="M14.354 1.646a.5.5 0 0 1 0 .708l-8 8a.5.5 0 0 1-.708-.708l8-8a.5.5 0 0 1 .708 0z" />
                        </svg>
                    </a>
                </li>
            }
        </ul>
    }
    else
    {
        <div class="notfound">@_localizer["empty"]</div>
    }
</div>

@code {
    protected List<Post> Posts { get; set; }
    protected Author Author { get; set; }

    protected string SearchTerm { get; set; }
    protected string FilterLabel { get; set; }
    protected PublishedStatus FilterValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Author = await _http.GetFromJsonAsync<Author>("api/author/getcurrent");
        FilterLabel = _localizer["all"];
        await Load();
    }

    protected async Task Load()
    {
        Posts = await _http.GetFromJsonAsync<List<Post>>($"api/post/list/{FilterValue}");
    }

    public void CheckAll(object checkValue)
    {
        bool isChecked = (bool)checkValue;
        Posts.ForEach(p => p.Selected = isChecked);
        StateHasChanged();
    }

    public async Task RunAction(GroupAction action)
    {
        string confirm = _localizer["confirm-delete"];
        bool confirmed = false;

        if (action == GroupAction.Delete)
        {
            confirmed = await _jsruntime.InvokeAsync<bool>("confirm", confirm);
            if (!confirmed)
                return;
        }

        foreach (var post in Posts)
        {
            if (post.Selected)
            {
                switch (action)
                {
                    case GroupAction.Publish:
                        await _http.PutAsJsonAsync($"api/post/publish/{post.Id}", true);
                        break;
                    case GroupAction.Unpublish:
                        await _http.PutAsJsonAsync($"api/post/publish/{post.Id}", false);
                        break;
                    case GroupAction.Feature:
                        await _http.PutAsJsonAsync($"api/post/featured/{post.Id}", !post.IsFeatured);
                        break;
                    case GroupAction.Delete:
                        await _http.DeleteAsync($"api/post/{post.Id}");
                        break;
                }
            }
        }
        await Load();
    }

    protected async Task SearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SearchPosts();
    }

    protected async Task SearchPosts()
    {
        if (string.IsNullOrEmpty(SearchTerm))
            SearchTerm = "*";

        Posts = await _http.GetFromJsonAsync<List<Post>>($"api/post/list/search/{SearchTerm}");
        SearchTerm = "";
    }

    public async Task Filter(PublishedStatus filter)
    {
        FilterValue = filter;
        switch (filter)
        {
            case PublishedStatus.Published:
                FilterLabel = _localizer["published"];
                break;
            case PublishedStatus.Drafts:
                FilterLabel = _localizer["draft", true];
                break;
            case PublishedStatus.Featured:
                FilterLabel = _localizer["featured"];
                break;
            default:
                FilterLabel = _localizer["all"];
                break;
        }
        //CurrentPage = 1;
        await Load();
    }

    public async Task Publish(Post post)
    {
        Toast(await _http.PutAsJsonAsync($"api/post/publish/{post.Id}", (post.Published == DateTime.MinValue)));
        await Load();
    }

    public async Task Featured(Post post)
    {
        Toast(await _http.PutAsJsonAsync($"api/post/featured/{post.Id}", !post.IsFeatured));
        await Load();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsruntime.InvokeVoidAsync("commonJsFunctions.setTooltip");
        }
    }

    protected void Toast(HttpResponseMessage msg)
    {
        if (msg.IsSuccessStatusCode)
            _toaster.Success(_localizer["completed"]);
        else
            _toaster.Error(_localizer["generic-error"]);
    }
}