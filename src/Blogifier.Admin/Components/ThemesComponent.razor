@inject HttpClient _http
@inject IStringLocalizer<Resource> _localizer
@inject IJSRuntime JSRuntime

@if (CurrentTheme != null)
{
	<div class="app-themes">
		<div class="row">
			<div class="col-md-6 col-lg-4">
				<div class="app-themes-item app-themes-active">
					<img src="@CurrentTheme.Cover" class="app-themes-cover" alt="@CurrentTheme.Title">
					<div class="app-themes-title d-flex">
						<span class="app-themes-name my-auto">@CurrentTheme.Title (current)</span>
						<button type="button" class="btn btn-dark my-auto ml-auto" @onclick="()=> ModalShow()" @onclick:preventDefault>
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-layout-text-sidebar-reverse" viewBox="0 0 16 16">
								<path fill-rule="evenodd" d="M2 1h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zm12-1a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12z" />
								<path fill-rule="evenodd" d="M5 15V1H4v14h1zm8-11.5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5zm0 3a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5zm0 3a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5zm0 3a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5z" />
							</svg>
						</button>
					</div>
				</div>
			</div>
			@foreach (var item in Themes)
			{
				<div class="col-md-6 col-lg-4">
					<div class="app-themes-item">
						<img src="@item.Cover" class="app-themes-cover" alt="@item.Title">
						<div class="app-themes-title d-flex">
							<span class="app-themes-name my-auto">@item.Title</span>
							<button type="button" class="btn btn-dark my-auto ml-auto" @onclick="()=> SelectTheme(item.Title)" @onclick:preventDefault>@_localizer["select"]</button>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
}

@if (showModal)
{
	<div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
		<div class="modal-dialog">
			<div class="modal-content">

				<!-- Modal Header -->
				<div class="modal-header">
					<h4 class="modal-title">@CurrentTheme.Title - @_localizer["settings"]</h4>
					<button type="button" class="close" @onclick="@ModalCancel">&times;</button>
				</div>

				<!-- Modal body -->
				<div class="modal-body" style="height: 600px; overflow-y: scroll">
					@foreach (var section in Settings.Sections)
					{
						<h5>@section.Label</h5>
						<hr />
						foreach (var field in section.Fields)
						{
							<div class="form-group">
								@if (field.Type == "select")
								{
									<label class="form-control-label">@field.Label</label>
									<select class="form-control selectpicker" id="@field.Id" name="@field.Id">
										@foreach (var item in field.Options)
										{
											if (field.Value == item)
											{
												<option value="@item" selected>@item</option>
											}
											else
											{
												<option value="@item">@item</option>
											}
										}
									</select>
								}
								else if (field.Type == "checkbox")
								{
									<div class="custom-control custom-switch">
										<input type="checkbox" class="custom-control-input" id="@field.Id" name="@field.Id" value="@field.Value">
										<label class="custom-control-label" for="@field.Id">@field.Label</label>
									</div>
								}
								else if (field.Type == "textarea")
								{
									<label class="form-control-label">@field.Label</label>
									<textarea class="form-control" id="@field.Id" name="@field.Id" rows="3" cols="50">@field.Value</textarea>
								}
								else
								{
									<label class="form-control-label">@field.Label</label>
									<input type="text" class="form-control" id="@field.Id" name="@field.Id" value="@field.Value" />
								}
							</div>
						}
					}
				</div>

				<!-- Modal footer -->
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="@ModalCancel">@_localizer["cancel"]</button>
					<button type="button" class="btn btn-brand" @onclick=@Save>@_localizer["save"]</button>
				</div>

			</div>
		</div>
	</div>
}

<ToasterComponent @ref="Toaster" />

@code {
	protected Blog Blog { get; set; }
	protected List<ThemeItem> Themes { get; set; }
	protected ThemeItem CurrentTheme { get; set; }
	protected ToasterComponent Toaster;
	protected ThemeSettings Settings { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await Load();
	}

	public async Task Load()
	{
		Themes = new List<ThemeItem>();

		Blog = await _http.GetFromJsonAsync<Blog>("api/blog");
		var allThemes = await _http.GetFromJsonAsync<IList<string>>($"api/storage/themes");

		Settings = await _http.GetFromJsonAsync<ThemeSettings>($"api/theme/{Blog.Theme}");

		foreach (var theme in allThemes)
		{
			if (theme.ToLower() == Blog.Theme.ToLower())
			{
				CurrentTheme = new ThemeItem
				{
					Title = theme.Capitalize(),
					IsCurrent = (Blog.Theme.ToLower() == theme.ToLower()),
					Cover = await GetCover(theme)
				};
			}
			else
			{
				Themes.Add(new ThemeItem
				{
					Title = theme.Capitalize(),
					IsCurrent = (Blog.Theme.ToLower() == theme.ToLower()),
					Cover = await GetCover(theme)
				});
			}
		}
	}

	protected async Task SelectTheme(string theme)
	{
		Blog.Theme = theme;
		Toaster.Toast(await _http.PutAsJsonAsync<Blog>($"api/blog", Blog));
		await Load();
	}

	private async Task<string> GetCover(string theme)
	{
		string slash = System.IO.Path.DirectorySeparatorChar.ToString();
		string file = $"wwwroot{slash}themes{slash}{theme}{slash}screenshot.png";
		var result = await _http.PutAsJsonAsync<string>($"api/storage/exists", file);

		if (result.IsSuccessStatusCode)
			return $"themes/{theme}/screenshot.png";
		else
			return "img/img-placeholder.png";
	}

	bool showModal = false;
	void ModalShow() => showModal = true;
	void ModalCancel() => showModal = false;

	protected async Task Save()
	{
		foreach (var section in Settings.Sections)
		{
			foreach (var field in section.Fields)
			{
				var val = await JSRuntime.InvokeAsync<object>("commonJsFunctions.getFieldValue", field);
				field.Value = val.ToString();
			}
		}

		Toaster.Toast(await _http.PostAsJsonAsync<ThemeSettings>($"api/theme/{Blog.Theme}", Settings));
		showModal = false;
	}
}